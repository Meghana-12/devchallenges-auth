GET http://localhost:4000/posts
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE2NTI5OTE1NjcsImV4cCI6MTY1Mjk5MTU4N30.6jAqJvKZSaTi-88QVPGRuOwNGeD1iWJQeVZQPlqjYUs
### 

POST http://localhost:3000/auth/signup
Content-Type: application/json
    
{
    "username": "test",
    "password": "test",
    "name": "test"
}

###

POST http://localhost:3000/auth/signin
Content-Type: application/json
    
{
    "username": "test",
    "password": "test"
}

### 
POST http://localhost:3000/auth/token
Content-Type: application/json

{
    "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE2NTI5OTEzMzd9.1NgqFWFKAYapbZzRYkmsr2dxpXiWRmLz8QGTjbRExGE"
}
### 

DELETE  http://localhost:3000/auth/logout 
Content-Type: application/json


{
    "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE2NTI5OTEzMzd9.1NgqFWFKAYapbZzRYkmsr2dxpXiWRmLz8QGTjbRExGE"
}

###  
# app.post('/auth/signin', async (req, res) => {
#     const user = users.find(user => user.name === req.body.username)
#   if (user == null) {
#     return res.status(400).send('Cannot find user')
#   }
#   try {
#     if(await bcrypt.compare(req.body.password, user.password)) {
#         const username = req.body.username
#         const user = { name: username }
      
#         const accessToken = genAccessToken(user)
#         const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN)
#         refreshTokens.push(refreshToken)
#         res.json({ accessToken: accessToken, refreshToken: refreshToken })
#     } else {
#       res.send('Not Allowed')
#     }
#   } catch {
#     res.status(500).send()
#   }
# })